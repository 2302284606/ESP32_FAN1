创建个纯英文ps脚本放在C:\Users\Administrator\Desktop\share\app 目录下 点击脚本能够自动上传代码到github 仓库 仓库地址 https://github.com/2302284606/ESP32_FAN1.git 
邮箱是 LIUXING23I@2025.com 
仓库是ESP32_FAN1 上传到main分支，改脚本来添加错误处理和详细的输出信息，添加了错误处理机制，添加了详细的日志输出功能
确认是否有文件更改
只有在检测到更改时才进行提交和推送
如果没有更改，会显示相应的提示信息
这个版本的脚本会：
先同步远程仓库的状态
检查是否有新的更改
只有在有更改时才进行提交和推送
如果没有更改，会提示用户
并且创建一个上传.md文件显示上传的文件名


MQTT 连接信息
连接地址：
s1202e81.ala.cn-hangzhou.emqxsl.cn
MQTT over TLS/SSL 端口：
8883
WebSocket over TLS/SSL 端口：
8084

username = 'emqx'
password = 'linjiajun1'
const char* status_topic = "liuxing23i/fan";          // 发布状态的主题
const char* control_topic = "liuxing23i/fan/control"; // 订阅控制命令的主题
const char* ui_update_topic = "$sys/Fiw8h1D03X/d1/thing/property/set";  // 订阅UI更新主题


 

**AHT20 的 I2C 接线：**

	1. **VCC** → 接 ESP32 的 3.3V
	2. **GND** → 接 ESP32 的 GND
	3. **SCL** → 接 ESP32 的 GPIO22（默认 I2C 时钟线）
	4. **SDA** → 接 ESP32 的 GPIO21（默认 I2C 数据线）


#### **TB6612FNG 电机驱动模块引脚定义：**
7. **STBY** → 接 ESP32 的 GPIO14 低电平启用模块）
1. **VCC** →  ESP32 的 3.3V 
2. **VM** → 5V
3. **GND** → 接 ESP32 和电机电源的地线
4. **AIN1** → 接 ESP32 的 GPIO25
5. **AIN2** → 接 ESP32 的 GPIO26
6. **PWMA** → 接 ESP32 的 GPIO27（用于控制电机 A 的 PWM）
9. **AO1, AO2** → 接到电机 A 的两端

STBY是低电平启用


OLED连接：

- VCC → ESP32 3.3V

- GND → ESP32 GND


- SCL → GPIO22

- SDA → GPIO21